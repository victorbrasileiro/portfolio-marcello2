@import url('https://fonts.googleapis.com/css2?family=Chakra+Petch:wght@300;400&family=Creepster&family=Poppins:wght@400;500;700&family=Quantico:wght@400;700&display=swap');


* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    --cor-primaria: #fff;
    --cor-secundaria: #000;
    --cor-terciaria: rgb(255, 119, 51);
    --cor-quartenaria: #00f7ff;

    --fonte-primaria: 'Poppins', sans-serif; 
}

html {
    scroll-behavior: smooth; /*Deixa o scroll mais suave*/
    font-size: 10px;
}

body {
    font-family: var(--fonte-primaria);
}

#pessoal {
    height: 100vh;
    width: 100%;
    display: flex;
    align-items: center;
}

.conteudo-pessoal {
    height: 70%;
    width: 50%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-size: 10px;
    background-color: var(--cor-secundaria);
}

.conteudo-pessoal div h1 {
    color: transparent;
    padding: 0px 4px;
    font-size: 4.5rem;
    line-height: 6rem;
    animation: titulo_escrito .5s ease forwards; /* forwards não vai permanecer na transição. vai ficar no estado final da animação */
}

/*Ele começa transparente e quando a animação termina e ele conclui
100% do carregamento dela, ela fica branca*/
@keyframes titulo_escrito {
    100% {
        color: var(--cor-primaria); 
    }
}

/*Utilizando o atalho: Shift + Alt + seta pra baixo, é possivel copiar e colar de forma mais pratica*/
/*a função nth-child é possivel criar uma animação que é capaz de inserir um elemento por vez em um bloco de codigo.*/
/*Tentar fazer isso na animaão da digitação*/
.conteudo-pessoal div h1:nth-child(1) {
    animation-delay: 1s;
}
.conteudo-pessoal div h1:nth-child(2) {
    animation-delay: 2s;
}
.conteudo-pessoal div h1:nth-child(3) {
    animation-delay: 3s;
}


.digitando::after {
    content: '|';
    margin-left: 5px;
    opacity: 1;
    animation: pisca 1s infinite;
}

@keyframes pisca {
    from {
        opacity: 1;
    }

    to {
        opacity: 0;
    }
}

@keyframes inicializar {
    from {
        opacity: 0;
        transform: translate3d(0, -60px, 0);
    }

    to {
        opacity: 1;
        transform: translate3d(0, 0, 0);
    }
}